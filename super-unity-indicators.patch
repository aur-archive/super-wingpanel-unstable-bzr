diff -ruN src.bak/unstable/CMakeLists.txt src/unstable/CMakeLists.txt
--- src.bak/unstable/CMakeLists.txt	2014-07-24 11:45:50.222008563 +0900
+++ src/unstable/CMakeLists.txt	2014-07-24 13:56:52.384815012 +0900
@@ -1,6 +1,6 @@
 # Check http://webdev.elementaryos.org/docs/developer-guide/cmake for documentation
 
-project (super-wingpanel)
+project (super-wingpanel C)
 cmake_minimum_required (VERSION 2.8)
 cmake_policy (VERSION 2.8)
 
@@ -48,6 +48,7 @@
 
 set (WINGPANEL_DEPS_NOVALA 
     gthread-2.0
+    libido3-0.1
 )
 
 
@@ -94,7 +95,7 @@
 
     src/Indicator/IndicatorIface.vala
     src/Indicator/IndicatorLoader.vala
-    src/Indicator/IndicatorFileModel.vala
+
     src/Indicator/IndicatorObjectEntry.vala
     src/Indicator/IndicatorObject.vala
     src/Indicator/IndicatorFactory.vala
diff -ruN src.bak/unstable/src/Indicator/IndicatorFactory.vala src/unstable/src/Indicator/IndicatorFactory.vala
--- src.bak/unstable/src/Indicator/IndicatorFactory.vala	2014-07-24 11:45:50.220008563 +0900
+++ src/unstable/src/Indicator/IndicatorFactory.vala	2014-07-24 12:16:55.648199906 +0900
@@ -87,7 +87,7 @@
                 indicator = new Indicator.Object.from_file (indicator_path);
             } else {
                 debug ("Loading Indicator File: %s", name);
-                // indicator = new Indicator.Ng.for_profile (indicator_path, "desktop");
+                indicator = new Indicator.Ng.for_profile (indicator_path, "desktop");
             }
 
             if (indicator != null)
diff -ruN src.bak/unstable/src/Indicator/IndicatorFileModel.vala src/unstable/src/Indicator/IndicatorFileModel.vala
--- src.bak/unstable/src/Indicator/IndicatorFileModel.vala	2014-07-24 11:45:50.220008563 +0900
+++ src/unstable/src/Indicator/IndicatorFileModel.vala	1970-01-01 09:00:00.000000000 +0900
@@ -1,94 +0,0 @@
-// -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-
-/***
-  BEGIN LICENSE
-
-  Copyright (C) 2010-2012 Canonical Ltd
-  This program is free software: you can redistribute it and/or modify it
-  under the terms of the GNU Lesser General Public License version 3, as published
-  by the Free Software Foundation.
-
-  This program is distributed in the hope that it will be useful, but
-  WITHOUT ANY WARRANTY; without even the implied warranties of
-  MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
-  PURPOSE.  See the GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License along
-  with this program.  If not, see <http://www.gnu.org/licenses/>
-
-  END LICENSE
-
-  Authored by canonical.com
-***/
-
-namespace SuperWingpanel.Backend {
-
-    public class IndicatorFileModel {
-        private Gee.HashMap<Indicator.Object, string> indicator_map;
-
-        public IndicatorFileModel (Services.Settings settings) {
-            indicator_map = new Gee.HashMap<Indicator.Object, string> ();
-
-            // Indicators we don't want to load
-            string skip_list = Environment.get_variable ("UNITY_PANEL_INDICATORS_SKIP") ?? "";
-
-            if (skip_list == "all") {
-                warning ("Skipping all indicator loading");
-                return;
-            }
-
-            foreach (string blocked_indicator in settings.blacklist) {
-                skip_list += "," + blocked_indicator;
-                debug ("Blacklisting %s", blocked_indicator);
-            }
-
-            debug ("Blacklisted Indicators: %s", skip_list);
-
-            var indicators_to_load = new Gee.ArrayList<string> ();
-            var dir = File.new_for_path (Build.INDICATORDIR);
-            debug ("Indicator Directory: %s", dir.get_path ());
-
-            try {
-                var enumerator = dir.enumerate_children (FileAttribute.STANDARD_NAME,
-                                                         FileQueryInfoFlags.NONE, null);
-
-                FileInfo file_info;
-
-                while ((file_info = enumerator.next_file (null)) != null) {
-                    string leaf = file_info.get_name ();
-
-                    if (leaf in skip_list) {
-                        warning ("SKIP LOADING: %s", leaf);
-                        continue;
-                    }
-
-                    if (leaf.has_suffix (".so"))
-                        indicators_to_load.add (leaf);
-                }
-            } catch (Error err) {
-                error ("Unable to read indicators: %s", err.message);
-            }
-
-            foreach (string leaf in indicators_to_load)
-                load_indicator (dir.get_child (leaf).get_path (), leaf);
-        }
-
-        public Gee.Collection<Indicator.Object> get_indicators () {
-            return indicator_map.keys;
-        }
-
-        public string get_indicator_name (Indicator.Object indicator) {
-            return indicator_map.get (indicator);
-        }
-
-        private void load_indicator (string filename, string leaf) {
-            debug ("LOADING: %s", leaf);
-
-            var indicator = new Indicator.Object.from_file (filename);
-
-            if (indicator is Indicator.Object)
-                indicator_map.set (indicator, leaf);
-            else
-                critical ("Unable to load %s", filename);
-        }
-    }
-}
diff -ruN src.bak/unstable/src/Indicator/IndicatorObjectEntry.vala src/unstable/src/Indicator/IndicatorObjectEntry.vala
--- src.bak/unstable/src/Indicator/IndicatorObjectEntry.vala	2014-07-24 11:45:50.220008563 +0900
+++ src/unstable/src/Indicator/IndicatorObjectEntry.vala	2014-07-24 12:26:18.549257645 +0900
@@ -18,8 +18,8 @@
   END LICENSE
 ***/
 
-namespace SuperWingpanel.Backend
-{
+namespace SuperWingpanel.Backend {
+
     public class IndicatorObjectEntry: Widgets.IndicatorButton, IndicatorWidget {
         private unowned Indicator.ObjectEntry entry;
         private unowned Indicator.Object parent_object;
@@ -40,8 +40,8 @@
             .menu {
                 background-color:@transparent;
                 border-color:@transparent;
-                -unico-inner-stroke-width: 0;
                 background-image:none;
+                border-width:0;
              }
              .popover_bg {
                background-color:#fff;
@@ -71,6 +71,13 @@
                 return;
             }
 
+            // Workaround for buggy indicators: this menu may still be part of
+            // another panel entry which hasn't been destroyed yet. Those indicators
+            // trigger entry-removed after entry-added, which means that the previous
+            // parent is still in the panel when the new one is added.
+            if (entry.menu.get_attach_widget () != null)
+                entry.menu.detach ();
+
             set_submenu (entry.menu);
 
             setup_drawing ();
diff -ruN src.bak/unstable/src/Services/IndicatorSorter.vala src/unstable/src/Services/IndicatorSorter.vala
--- src.bak/unstable/src/Services/IndicatorSorter.vala	2014-07-24 11:45:50.220008563 +0900
+++ src/unstable/src/Services/IndicatorSorter.vala	2014-07-24 12:34:56.966310821 +0900
@@ -23,6 +23,7 @@
  * be passed as CompareFuncs.
  */
 public class SuperWingpanel.Services.IndicatorSorter {
+
     private struct IndicatorOrderNode {
         public string name;        // name of indicator (library)
         public string? entry_name; // name of entry (menu item)
@@ -33,17 +34,23 @@
         { "libapplication.so", null },                   // indicator-application (App indicators)
         { "libapplication.so", "keyboard" },             // Keyboard layout selector (old)
         { "libapplication.so", "gsd-keyboard-xkb" },     // keyboard layout selector
+        { "com.canonical.indicator.keyboard", null },
         { "libsoundmenu.so", null },                     // indicator-sound
+        { "com.canonical.indicator.sound", null },
         { "libnetwork.so", null },                       // indicator-network
         { "libnetworkmenu.so", null },                   // indicator-network
         { "libapplication.so", "nm-applet" },            // network manager
         { "libbluetooth.so", null },                     // indicator-bluetooth
         { "libapplication.so", "bluetooth-manager" },    // indicator-gnome-bluetooth (old)
+        { "com.canonical.indicator.bluetooth", null },
         { "libprintersmenu.so", null },                  // indicator-printers
         { "libsyncindicator.so", null },                 // indicator-sync
         { "libpower.so", null },                         // indicator-power
+        { "com.canonical.indicator.power", null },
         { "libmessaging.so", null },                     // indicator-messages
+        { "com.canonical.indicator.messages", null },
         { "libsession.so", null },                       // indicator-session
+        { "com.canonical.indicator.session", null },
         { "libsession.so", "indicator-session-users" },  // indicator-session
         { "libsession.so", "indicator-session-devices" } // indicator-session
     };
diff -ruN src.bak/unstable/src/Widgets/PrimaryWindow.vala src/unstable/src/Widgets/PrimaryWindow.vala
--- src.bak/unstable/src/Widgets/PrimaryWindow.vala	2014-07-24 13:52:43.982789532 +0900
+++ src/unstable/src/Widgets/PrimaryWindow.vala	2014-07-24 13:52:42.013789330 +0900
@@ -314,7 +314,7 @@
         private void create_entry (IndicatorWidget entry) {
             string entry_name = entry.get_indicator ().get_name ();
 
-            if (entry_name == "libdatetime.so") {
+            if (entry_name == "libdatetime.so" || entry_name == "com.canonical.indicator.datetime") {
                 if (manager.settings.show_datetime_in_tray)
                     indicator_menubar.insert_sorted (entry);
                 else
--- src/unstable/org.pantheon.desktop.super-wingpanel.gschema.xml~	2014-07-24 15:09:20.944461000 +0900
+++ src/unstable/org.pantheon.desktop.super-wingpanel.gschema.xml	2014-08-10 07:02:06.452459591 +0900
@@ -76,7 +76,7 @@
             <description>Override the default "Applications" text.</description>
         </key>
         <key type="as" name="indicator-order">
-            <default>[ 'libdatetime.so','libapplication.so', 'libapplication.so|keyboard', 'libapplication.so|gsd-keyboard-xkb', 'libsoundmenu.so', 'libnetwork.so', 'libnetworkmenu.so', 'libapplication.so|nm-applet', 'libbluetooth.so', 'libapplication.so|bluetooth-manager', 'libprintersmenu.so', 'libsyncindicator.so', 'libpower.so', 'libmessaging.so', 'libsession.so', 'libsession.so|indicator-session-users', 'libsession.so|indicator-session-devices' ]</default>
+            <default>[ 'libappmenu.so', 'libdatetime.so', 'com.canonical.indicator.datetime', 'libapplication.so', 'libapplication.so|keyboard', 'libapplication.so|gsd-keyboard-xkb', 'com.canonical.indicator.keyboard', 'libsoundmenu.so', 'com.canonical.indicator.sound', 'libnetwork.so', 'libnetworkmenu.so', 'libapplication.so|nm-applet', 'libbluetooth.so', 'libapplication.so|bluetooth-manager', 'com.canonical.indicator.bluetooth', 'libprintersmenu.so', 'libsyncindicator.so', 'libpower.so', 'com.canonical.indicator.power', 'libmessaging.so', 'com.canonical.indicator.messages', 'libsession.so', 'com.canonical.indicator.session', 'libsession.so|indicator-session-users', 'libsession.so|indicator-session-devices' ]</default>
             <summary>The order in which to display indicators, from left to right</summary>
             <description>The order in which to display indicators, from left to right</description>
         </key>
